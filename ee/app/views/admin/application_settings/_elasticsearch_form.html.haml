- return unless License.feature_available?(:elastic_search)

- recreate_index_url = help_page_url('integration/elasticsearch.md')
- recreate_index_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: recreate_index_url }
- recreate_index_text = s_("Changes won't take place until the index is %{link_start}recreated%{link_end}.").html_safe % { link_start: recreate_index_link_start, link_end: '</a>'.html_safe }
- expanded = integration_expanded?('elasticsearch_')

%section.settings.as-elasticsearch.no-animate#js-elasticsearch-settings{ class: ('expanded' if expanded), data: { qa_selector: 'elasticsearch_tab' } }
  .settings-header
    %h4
      = _('Elasticsearch')
    %button.btn.js-settings-toggle{ type: 'button' }
      = expanded ? 'Collapse' : 'Expand'
    %p
      = _('Elasticsearch integration. Elasticsearch AWS IAM.')
  .settings-content

    = form_for @application_setting, url: integrations_admin_application_settings_path(anchor: 'js-elasticsearch-settings'), html: { class: 'fieldset-form' } do |f|
      = form_errors(@application_setting) if expanded

      %fieldset
        .sub-section
          .form-group
            .form-check
              = f.check_box :elasticsearch_indexing, class: 'form-check-input', data: { qa_selector: 'indexing_checkbox' }
              = f.label :elasticsearch_indexing, class: 'form-check-label' do
                Elasticsearch indexing
              - unless Gitlab::CurrentSettings.elasticsearch_indexing?
                .form-text.text-muted
                  = _('Please create an index before enabling indexing')
              - if Feature.enabled?(:elasticsearch_web_indexing, default_enabled: true) && Gitlab::CurrentSettings.elasticsearch_indexing?
                .form-text
                  = link_to _('Index all projects'), admin_elasticsearch_enqueue_index_path,
                      class: ['btn', 'btn-success'], method: :post

          .form-group
            .form-check
              = f.check_box :elasticsearch_search, class: 'form-check-input', data: { qa_selector: 'search_checkbox' }
              = f.label :elasticsearch_search, class: 'form-check-label' do
                Search with Elasticsearch enabled

          .form-group
            = f.label :elasticsearch_url, 'URL', class: 'label-bold'
            = f.text_field :elasticsearch_url, value: @application_setting.elasticsearch_url.join(', '), class: 'form-control', placeholder: 'http://localhost:9200', data: { qa_selector: 'url_field' }
            .form-text.text-muted
              = _('The URL to use for connecting to Elasticsearch. Use a comma-separated list to support clustering (e.g., "http://localhost:9200, http://localhost:9201").')

          .form-group
            = f.label :elasticsearch_shards, _('Number of Elasticsearch shards'), class: 'label-bold'
            = f.number_field :elasticsearch_shards, value: @application_setting.elasticsearch_shards, class: 'form-control'
            .form-text.text-muted
              = _('How many shards to split the Elasticsearch index over.')
              = recreate_index_text

          .form-group
            = f.label :elasticsearch_replicas, _('Number of Elasticsearch replicas'), class: 'label-bold'
            = f.number_field :elasticsearch_replicas, value: @application_setting.elasticsearch_replicas, class: 'form-control'
            .form-text.text-muted
              = _('How many replicas each Elasticsearch shard has.')
              = recreate_index_text

          .form-group
            = f.label :elasticsearch_indexed_field_length_limit, _('Maximum field length'), class: 'label-bold'
            = f.number_field :elasticsearch_indexed_field_length_limit, value: @application_setting.elasticsearch_indexed_field_length_limit, class: 'form-control'
            .form-text.text-muted
              = _('If any indexed field exceeds this limit it will be truncated to this number of characters and the rest will not be indexed or searchable. This does not apply to repository and wiki indexing. Setting this to 0 means it is unlimited.')

          .form-group
            = f.label :elasticsearch_max_bulk_size_mb, _('Maximum bulk request size (MiB)'), class: 'label-bold'
            = f.number_field :elasticsearch_max_bulk_size_mb, value: @application_setting.elasticsearch_max_bulk_size_mb, class: 'form-control'
            .form-text.text-muted
              = _('Maximum size of Elasticsearch bulk indexing requests.')
              = _('This only applies to repository indexing operations.')

          .form-group
            = f.label :elasticsearch_max_bulk_concurrency, _('Bulk request concurrency'), class: 'label-bold'
            = f.number_field :elasticsearch_max_bulk_concurrency, value: @application_setting.elasticsearch_max_bulk_concurrency, class: 'form-control'
            .form-text.text-muted
              = _('Maximum concurrency of Elasticsearch bulk requests per indexing operation.')
              = _('This only applies to repository indexing operations.')

        .sub-section
          %h4= _('Elasticsearch indexing restrictions')
          .form-group
            .form-check
              = f.check_box :elasticsearch_limit_indexing, class: 'form-check-input js-limit-checkbox'
              = f.label :elasticsearch_limit_indexing, class: 'form-check-label' do
                = _('Limit namespaces and projects that can be indexed')

          .form-group.js-limit-namespaces{ class: ('hidden' unless @application_setting.elasticsearch_limit_indexing) }
            = f.label :elasticsearch_namespace_ids, _('Namespaces to index'), class: 'label-bold'
            - if elasticsearch_too_many_namespaces?
              %p= _('Too many namespaces enabled. You will need to manage them via the console or the API.')
            - else
              = f.text_field :elasticsearch_namespace_ids, class: 'js-elasticsearch-namespaces', value: elasticsearch_namespace_ids, data: { selected: elasticsearch_objects_options(@application_setting.elasticsearch_limited_namespaces(true)).to_json }

          .form-group.js-limit-projects{ class: ('hidden' unless @application_setting.elasticsearch_limit_indexing) }
            = f.label :elasticsearch_project_ids, _('Projects to index'), class: 'label-bold'
            - if elasticsearch_too_many_projects?
              %p= _('Too many projects enabled. You will need to manage them via the console or the API.')
            - else
              = f.text_field :elasticsearch_project_ids, class: 'js-elasticsearch-projects', value: elasticsearch_project_ids, data: { selected: elasticsearch_objects_options(@application_setting.elasticsearch_limited_projects(true)).to_json }

        .sub-section
          %h4= _('Elasticsearch AWS IAM credentials')
          .form-group
            .form-check
              = f.check_box :elasticsearch_aws, class: 'form-check-input'
              = f.label :elasticsearch_aws, class: 'form-check-label' do
                Using AWS hosted Elasticsearch with IAM credentials
          .form-group
            = f.label :elasticsearch_aws_region, 'AWS region', class: 'label-bold'
            = f.text_field :elasticsearch_aws_region, value: @application_setting.elasticsearch_aws_region, class: 'form-control'
            .form-text.text-muted
              = _('Region that Elasticsearch is configured')

          .form-group
            = f.label :elasticsearch_aws_access_key, _('AWS Access Key'), class: 'label-bold'
            = f.text_field :elasticsearch_aws_access_key, value: @application_setting.elasticsearch_aws_access_key, class: 'form-control'
            .form-text.text-muted
              = _('AWS Access Key.  Only required if not using role instance credentials')

          - secret_access_key_label = @application_setting.elasticsearch_aws_secret_access_key.present? ? _('Enter new AWS Secret Access Key') : _('AWS Secret Access Key')
          .form-group
            = f.label :elasticsearch_aws_secret_access_key, secret_access_key_label, class: 'label-bold'
            = f.password_field :elasticsearch_aws_secret_access_key, autocomplete: 'new-password', class: 'form-control'
            .form-text.text-muted
              = _('AWS Secret Access Key.  Only required if not using role instance credentials')

      = f.submit _('Save changes'), class: "btn btn-success", data: { qa_selector: 'submit_button' }
