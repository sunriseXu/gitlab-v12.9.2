- pipeline = local_assigns.fetch(:pipeline)
- project = local_assigns.fetch(:project)

- license_management_settings_path = can?(current_user, :admin_software_license_policy, project) ? license_management_settings_path(project) : nil
- licenses_api_path = licenses_project_pipeline_path(project, pipeline) if project.feature_available?(:license_management)
- vulnerabilities_endpoint_path = expose_path(api_v4_projects_vulnerability_findings_path(id: project.id, params: { pipeline_id: pipeline.id, scope: 'dismissed' }))
- codequality_report_download_path = pipeline.downloadable_path_for_report_type(:codequality)

- if pipeline.expose_security_dashboard?
  #js-tab-security.build-security.tab-pane
    #js-security-report-app{ data: { dashboard_documentation: help_page_path('user/application_security/security_dashboard/index'),
    empty_state_svg_path: image_path('illustrations/security-dashboard-empty-state.svg'),
    pipeline_id: pipeline.id,
    project_id: project.id,
    source_branch: pipeline.source_ref,
    vulnerabilities_endpoint: vulnerabilities_endpoint_path,
    vulnerability_feedback_help_path: help_page_path('user/application_security/index'),
    empty_state_unauthorized_svg_path: image_path('illustrations/user-not-logged-in.svg'),
    empty_state_forbidden_svg_path: image_path('illustrations/lock_promotion.svg') } }

- if pipeline.expose_license_scanning_data?
  #js-tab-licenses.tab-pane
    #js-licenses-app{ data: { api_url: license_management_api_url(project),
    license_management_settings_path: license_management_settings_path,
    licenses_api_path: licenses_api_path,
    can_manage_licenses: can?(current_user, :admin_software_license_policy, project).to_s } }

- if codequality_report_download_path
  #js-tab-codequality.tab-pane
    #js-pipeline-codequality-report{ data: { codequality_report_download_path: codequality_report_download_path,
    blob_path: project_blob_path(project, pipeline.ref) } }
